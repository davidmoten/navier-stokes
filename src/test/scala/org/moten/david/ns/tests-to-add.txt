@Test
class NavierStokesTest {
  import Util._
  import Throwing._

  @Test
  def testNavierStokesStepDoesNothingToDataInEquilibrium() {
    info("equilibrium run")
    //create a 5x5x5 regular grid with no movement and 0 surface pressure, 
    //seawater kinematic viscosity is for 20 degrees C
    val size = 20
    info("creating map")
    val map = vectors(size).par
      .map(v => (v, Value(
        velocity = Vector.zero,
        pressure = abs(v.z * 1000 * 9.8),
        density = 1000,
        viscosity = 0.00000105,
        isObstacle = v.z == -size,
        boundary = Direction.values.map(d => (d, abs(v.get(d)) == 1 || v.get(d) == size)).toMap)))
      .seq.toMap
    info("creating Data")
    val data = new RegularGridSolver(map)
    //    println(data)
    val data2 = data.step(30)
    //    println(data2)
    //should be no change in any value after 30 seconds
    data.getPositions.foreach(v => assertTrue(equals(data.getValue(v), data2.getValue(v), 0.0001)))
  }

  private def equals(v1: Value, v2: Value, precision: Double): Boolean = {
    abs(v1.pressure - v2.pressure) <= precision && equals(v1.velocity, v2.velocity, precision)
  }

  private def equals(v1: Vector, v2: Vector, precision: Double) = {
    abs(v1.x - v2.x) <= precision && abs(v1.y - v2.y) <= precision && abs(v1.z - v2.z) <= precision
  }

  @Test
  def testNavierStokesStepDoesSomethingWhenNotInEquilibrium() {
    info("real try at solving")
    //create a 5x5x5 regular grid with no movement and 0 surface pressure, 
    //seawater kinematic viscosity is for 20 degrees C
    val size = 20
    info("creating map")
    val map = vectors(size).par
      .map(v => (v, Value(
        velocity = Vector.zero + Vector(nextDouble, nextDouble, nextDouble),
        pressure = abs(v.z * 1000 * 9.8) + 20 * nextDouble,
        density = 1000,
        viscosity = 0.00000105,
        isObstacle = v.z == -size,
        boundary = Direction.values.map(d => (d, abs(v.get(d)) == 1 || v.get(d) == size)).toMap)))
      .seq.toMap
    info("creating Data")
    val data = new RegularGridSolver(map)
    //    println(data)
    val data2 = data.step(30)
    //    println(data2)
  }

  @Test
  def testNavierStokesWithOneMetreBoxAndOneSlipWallNoZComponentShouldCreateWhirlpool() {
    //from http://www.stanford.edu/class/me469b/handouts/incompressible.pdf
    val size = 20
    val vectors = vectors2D(size)
    info("vectors=" + vectors)
    val max = vectors.map(_.x).max
    val min = vectors.map(_.x).min
    val maxZ = vectors.map(_.z).max
    val minZ = vectors.map(_.z).min
    info("max=" + max)
    val map = vectors.map(v => {
      val obstacle = v.x == 0 || v.x == max || v.y == 0
      def isZBoundary(d: Direction, v: Vector) =
        (d equals Z) && (v.get(d) == minZ || v.get(d) == maxZ)
      (v, Value(
        velocity = if (v.y == max) Vector(1, 0, 0) else Vector.zero,
        pressure = abs(9.8 * 1000 * v.z),
        density = 1000,
        viscosity = 0.00000105,
        isObstacle = obstacle,
        boundary = Direction.values.map(d =>
          (d, !obstacle && (isZBoundary(d, v)
            || abs(v.get(d)) == max))).toMap))
    }).toMap
    val data = new RegularGridSolver(map)
    val v1 = Vector(1.0 / size, (size - 1.0) / size, 0.0)
    val v2 = data.getValueAfterTime(v1, 1)
    info(v2)
    assertFalse("Velocity for position should have changed",
      data.getValue(v1).velocity equals v2.velocity)
    println(data.step(1, 7))
    //    println(Range(0, 30).map(data.step(1, _).getValue(v1) + "\n"))
  }
}

/**
 * P = Point
 * O = Obstacle
 * B = Boundary
 *
 * Test Cases
 *
 * PPP
 * PPO
 * PPB
 * PO*
 * PB*
 *
 * Use function values sqrt of different prime numbers
 *
 */
@Test
class RegularGridSolverTest {

  @Test
  def check() {
    val grid = Grid(Set())
    def values(v: Vector) = { null }
    val solver = new RegularGridSolver(grid, values, validate = false)
    //    override def getGradient(position: Vector, direction: Direction,
    //    f: PositionFunction, values: Vector => Value, relativeTo: Option[Vector],
    //    derivativeType: Derivative): Double = {

  }

}


/**
 * P = Point
 * O = Obstacle
 * B = Boundary
 *
 * Test Cases
 *
 * PPP
 * PPO
 * PPB
 * PO*
 * PB*
 *
 * Use function values sqrt of different prime numbers
 *
 */
@Test
class RegularGridSolverTest {

  @Test
  def check() {
    val grid = Grid(Set())
    def values(v: Vector) = { null }
    val solver = new RegularGridSolver(grid, values, validate = false)
    //    override def getGradient(position: Vector, direction: Direction,
    //    f: PositionFunction, values: Vector => Value, relativeTo: Option[Vector],
    //    derivativeType: Derivative): Double = {

  }

}
